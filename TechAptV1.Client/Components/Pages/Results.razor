@page "/results"
@using TechAptV1.Client.Models
@using TechAptV1.Client.Services
@using System.IO
@inject IJSRuntime JS

<h3>Results</h3>
<p>The table shows the top 20 numbers generated. The download XML and Binary feature allows you to download the entire data set</p>

<div>
    <button class="btn btn-primary" disabled="@_isLoading" @onclick="(async () => await this.DownloadXml())">Download XML</button>
    <button class="btn btn-primary" disabled="@_isLoading" @onclick="(async () => await this.DownloadBinary())">Download Binary</button>
</div>
<div>
    <table class="table">
        <thead>
            <tr>
                <th>Value</th>
                <th>IsPrime</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in this.numbers)
            {
                <tr>
                    <td>@item.Value</td>
                    <td>@item.IsPrime</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    [Inject] public required ILogger<Threading> Logger { get; set; }
    [Inject] public required DataService _dataService { get; set; }
    [Inject] public required ExportService _exportService { get; set; }

    private List<Number> numbers = new ();
    private bool _isLoading { get; set; } = false;

    /// <summary>
    /// Fetches all the records, serializes them to XML and downloads the file
    /// </summary>
    private async Task DownloadXml()
    {
        _isLoading = true;
        StateHasChanged();
        await Task.Run(() => RunDownloadXml());
        _isLoading = false;
        StateHasChanged();
    }

    private async Task RunDownloadXml(){
        this.Logger.LogInformation("DownloadXml");
        var bytes = await _exportService.GetXmLBytesAsync();
        var stream = GetFileStream(bytes);
        using var streamRef = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", "Numbers.Xml", streamRef);
    }

    private Stream GetFileStream(byte[] bytes)
    {
        var fileStream = new MemoryStream(bytes);

        return fileStream;
    }

    /// <summary>
    /// Fetches all the records, serializes them to Binary and downloads the file
    /// </summary>
    private async Task DownloadBinary()
    {
        this.Logger.LogInformation("DownloadBinary");
        
        _isLoading = true;
        StateHasChanged();
        await Task.Run(() => RunDownloadBinary());
        _isLoading = false;
        StateHasChanged();

    }

    private async Task RunDownloadBinary()
    {
        this.Logger.LogInformation("DownloadBinary");

        var bytes = await (_exportService.GetBinBytesAsync());
        var stream = GetFileStream(bytes);
        using var streamRef = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", "Numbers.bin", streamRef);

    }


    protected override async Task OnInitializedAsync()
    {
        numbers = (await _dataService.GetAsync(20)).ToList();
    }

}

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = fileName ?? '';
      anchorElement.click();
      anchorElement.remove();
      URL.revokeObjectURL(url);
    }
</script>

