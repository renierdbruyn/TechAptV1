@page "/threading"
@implements IDisposable
@using TechAptV1.Client.Services

<h3>Threading &amp; Data Persistence</h3>

<div>
    <button class="btn btn-primary" disabled="@isStartDisabled" @onclick="(async () => await this.Start())">Start</button>
    <button class="btn btn-info" disabled="@isSaveDisabled" @onclick="(async () => await this.Save())">Save</button>
</div>
<div>
    <hr>
    <h4>Numbers:</h4>
    <ul>
        <li>Odd: <strong>@this._oddNumbers</strong></li>
        <li>Even: <strong>@this._evenNumbers</strong></li>
        <li>Prime: <strong>@this._primeNumbers</strong></li>
        <li>Total: <strong>@this._totalNumbers</strong></li>
    </ul>
    <hr>
</div>

@code {

    [Inject] public required ILogger<Threading> Logger { get; set; }
    [Inject] public required ThreadingService _threadingService { get; set; }
    [Inject] public required DataService _dataService { get; set; }

    private bool isStartDisabled =>  _threadingService._startedProcessing;
    private bool isSaveDisabled => _totalNumbers < _threadingService._stopLimit || _dataService.IsSaving();
    private int _oddNumbers = 0;
    private int _evenNumbers = 0;
    private int _primeNumbers = 0;
    private int _totalNumbers = 0;


    private System.Threading.Timer timer;
    private async Task Start()
    {
        this.Logger.LogInformation("Start");

        await _threadingService.Start();
    }

    private async Task Save()
    {
            
        this.Logger.LogInformation("Save");
        await _threadingService.Save();
    }

    private void UpdateNumbers()
    {
        _oddNumbers = _threadingService.GetOddNumbers();
        _evenNumbers = _threadingService.GetEvenNumbers();
        _primeNumbers = _threadingService.GetPrimeNumbers();
        _totalNumbers = _threadingService.GetTotalNumbers();
    }

    protected override async Task OnInitializedAsync()
    {
        timer = new System.Threading.Timer(
            async _ =>
            {
                UpdateNumbers();
                await InvokeAsync(StateHasChanged);
            },
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(15)
        );
    }

    public void Dispose()
    {
        timer?.Dispose();
    }



}


